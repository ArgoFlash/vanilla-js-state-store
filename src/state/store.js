// src/state/store.js                                                           // üìÑ Emplacement du module "state" (mini useState + store global)

/**
 * OBJECTIF
 * --------
 * 1) createState(initialValue): un mini "useState" vanilla
 *    - get(): lire la valeur
 *    - set(next): mettre √† jour (next peut √™tre une valeur ou une fonction updater)
 *    - subscribe(fn): √™tre notifi√© √† chaque changement
 *
 * 2) Un store global minimal pour l'app:
 *    - getState(), setState(patch), subscribeToState(fn)
 *
 * Remarque: on N'UTILISE PAS l'op√©rateur spread ("..."). On montre des copies avec
 * Object.keys + boucles simples pour les d√©butants
 */ // ‚¨ÖÔ∏è En-t√™te p√©dagogique : d√©crit le but du fichier et les r√®gles de style


/* =========================
   1) useState "vanilla"
   ========================= */ // ‚¨ÖÔ∏è Section 1 : √©tat local fa√ßon useState


/**
 * createState(initialValue)
 * @param {*} initialValue - valeur de d√©part
 * @returns { get, set, subscribe }
 */ // ‚¨ÖÔ∏è JSDoc : d√©crit la fonction et son API
export function createState(initialValue) {                                   // ‚¨ÖÔ∏è Export de la fabrique d‚Äô√©tat local
  // valeur courante
  let value = initialValue;                                                   // ‚¨ÖÔ∏è Stocke la valeur actuelle (modifiable)

  // abonn√©s (fonctions √† appeler quand la valeur change)
  const subs = new Set();                                                     // ‚¨ÖÔ∏è Ensemble de callbacks √† notifier

  /**
   * get(): renvoie la valeur actuelle
   */ // ‚¨ÖÔ∏è Lecture de l‚Äô√©tat
  function get() {                                                            // ‚¨ÖÔ∏è D√©finition de get()
    return value;                                                             // ‚¨ÖÔ∏è Retourne la valeur courante
  }

  /**
   * set(next): met √† jour la valeur
   * - si next est une fonction, on lui passe la valeur courante et on utilise son retour
   * - sinon, next est la nouvelle valeur directement
   * - si la valeur ne change pas (Object.is), on ne notifie pas
   */ // ‚¨ÖÔ∏è Mise √† jour de l‚Äô√©tat
  function set(next) {                                                        // ‚¨ÖÔ∏è D√©finition de set()
    const newValue = typeof next === "function" ? next(value) : next;         // ‚¨ÖÔ∏è Calcule la nouvelle valeur (supporte updater function)
    if (Object.is(newValue, value)) return;                                   // ‚¨ÖÔ∏è Rien √† faire si pas de changement (√©vite re-render)
    value = newValue;                                                         // ‚¨ÖÔ∏è Met √† jour la valeur interne
    // notifie chaque abonn√©                                                  // ‚¨ÖÔ∏è En r√©sum√© : un ‚Äúabonn√©‚Äù, c‚Äôest toute fonction √† qui tu veux dire ‚Äúh√©, l‚Äô√©tat a chang√©, mets-toi √† jour‚Äù
    for (const fn of subs) {                                                  // ‚¨ÖÔ∏è Parcourt tous les abonn√©s
      try { fn(value); } catch (e) { console.error(e); }                      // ‚¨ÖÔ∏è Appelle chaque callback en capturant les erreurs
    }
  }

  /**
   * subscribe(fn): s'abonner aux changements
   * renvoie une fonction "unsubscribe" pour se d√©sabonner
   */ // ‚¨ÖÔ∏è Abonnement aux changements d‚Äô√©tat
  function subscribe(fn) {                                                    // ‚¨ÖÔ∏è D√©finition de subscribe()
    subs.add(fn);                                                             // ‚¨ÖÔ∏è Ajoute le callback √† l‚Äôensemble
    return function unsubscribe() {                                           // ‚¨ÖÔ∏è Retourne une fonction de d√©sabonnement
      subs.delete(fn);                                                        // ‚¨ÖÔ∏è Retire le callback
    };
  }

  return { get, set, subscribe };                                             // ‚¨ÖÔ∏è Expose l‚ÄôAPI de l‚Äô√©tat local
}


/* =========================
   2) Store global de l'app
   ========================= */ // ‚¨ÖÔ∏è Section 2 : √©tat global partag√©


// √âtat global (ex: th√®me, todos)
let globalState = {                                                           // ‚¨ÖÔ∏è Objet racine du store global (modifiable par setState)
  theme: "light",     // "light" | "dark"                                     // ‚¨ÖÔ∏è Th√®me par d√©faut
  todos: [],          // { id: number, text: string, done: boolean }[]        // ‚¨ÖÔ∏è Liste de t√¢ches initialement vide
};

// Liste des listeners abonn√©s au store global
const listeners = new Set();                                                  // ‚¨ÖÔ∏è Ensemble de callbacks √† notifier sur changement global

/**
 * getState(): lire l'√©tat global courant
 */ // ‚¨ÖÔ∏è S√©lecteur global (lecture)
export function getState() {                                                  // ‚¨ÖÔ∏è Export de getState()
  return globalState;                                                         // ‚¨ÖÔ∏è Retourne la r√©f√©rence actuelle du state global
}

/**
 * shallowClone(obj): copie superficielle d'un objet (sans spread)
 */ // ‚¨ÖÔ∏è Utilitaire : copie d‚Äôobjet cl√©‚Üívaleur
function shallowClone(obj) {                                                  // ‚¨ÖÔ∏è D√©finition de shallowClone()
  const out = {};                                                             // ‚¨ÖÔ∏è Nouveau conteneur
  for (const k of Object.keys(obj)) {                                         // ‚¨ÖÔ∏è Parcourt chaque cl√© propre
    out[k] = obj[k];                                                          // ‚¨ÖÔ∏è Copie la valeur associ√©e
  }
  return out;                                                                 // ‚¨ÖÔ∏è Retourne la copie superficielle
}

/**
 * merge(a, b): cr√©e un nouvel objet avec les cl√©s de a, puis celles de b
 * (√©quivalent simple √† { ...a, ...b } mais sans spread)
 */ // ‚¨ÖÔ∏è Fusion non-destructive : priorise b sur a
function merge(a, b) {                                                        // ‚¨ÖÔ∏è D√©finition de merge()
  const out = shallowClone(a);                                                // ‚¨ÖÔ∏è Part d‚Äôune copie de a
  for (const k of Object.keys(b)) {                                           // ‚¨ÖÔ∏è Ajoute/√©crase avec les cl√©s de b
    out[k] = b[k];                                                            // ‚¨ÖÔ∏è Affecte la valeur de b dans out
  }
  return out;                                                                 // ‚¨ÖÔ∏è Renvoie le nouvel objet fusionn√©
}

/**
 * setState(patch): met √† jour une partie de l'√©tat global
 * ex: setState({ theme: "dark" })
 */ // ‚¨ÖÔ∏è Mise √† jour partielle du store global
export function setState(patch) {                                             // ‚¨ÖÔ∏è Export de setState()
  const nextState = merge(globalState, patch);                                // ‚¨ÖÔ∏è Cr√©e un nouvel √©tat (immutabilit√© basique)

  // Si la r√©f√©rence ne change pas, on pourrait ne pas notifier.
  // Ici, on compare par r√©f√©rence (simpliste) :
  if (nextState === globalState) return;                                      // ‚¨ÖÔ∏è Si identique par r√©f√©rence, on sort

  globalState = nextState;                                                    // ‚¨ÖÔ∏è Remplace l‚Äô√©tat global par la nouvelle r√©f√©rence

  for (const fn of listeners) {                                               // ‚¨ÖÔ∏è Notifie tous les abonn√©s
    try { fn(globalState); } catch (e) { console.error(e); }                  // ‚¨ÖÔ∏è Appelle les callbacks en capturant les erreurs
  }
}

/**
 * subscribeToState(fn): s'abonner au store global
 */ // ‚¨ÖÔ∏è Abonnement aux changements du store global
export function subscribeToState(fn) {                                        // ‚¨ÖÔ∏è Export de subscribeToState()
  listeners.add(fn);                                                          // ‚¨ÖÔ∏è Ajoute le listener
  return function unsubscribe() {                                             // ‚¨ÖÔ∏è Retourne la fonction de d√©sabonnement
    listeners.delete(fn);                                                     // ‚¨ÖÔ∏è Retire le listener
  };
}


/* =========================
   3) Actions Todo (immutables sans spread)
   ========================= */ // ‚¨ÖÔ∏è Section 3 : actions m√©tier (todos)

/**
 * addTodo(text): ajoute une nouvelle todo
 */ // ‚¨ÖÔ∏è Action : cr√©ation d‚Äôune todo
export function addTodo(text) {                                               // ‚¨ÖÔ∏è Export de addTodo()
  const todo = { id: Date.now(), text, done: false };                         // ‚¨ÖÔ∏è Construit l‚Äôobjet todo (id simple bas√© sur l‚Äôhorodatage)

  // copie du tableau + ajout
  const current = globalState.todos;                                          // ‚¨ÖÔ∏è R√©cup√®re le tableau actuel
  const next = new Array(current.length + 1);                                 // ‚¨ÖÔ∏è Cr√©e un nouveau tableau (taille +1)
  for (let i = 0; i < current.length; i++) next[i] = current[i];              // ‚¨ÖÔ∏è Copie chaque item
  next[current.length] = todo;                                                // ‚¨ÖÔ∏è Ajoute la nouvelle todo en fin

  setState({ todos: next });                                                  // ‚¨ÖÔ∏è Publie le nouvel √©tat (immutabilit√© respect√©e)
}

/**
 * toggleTodo(id): inverse "done" de l'√©l√©ment cibl√©
 */ // ‚¨ÖÔ∏è Action : bascule l‚Äô√©tat d‚Äôach√®vement
export function toggleTodo(id) {                                              // ‚¨ÖÔ∏è Export de toggleTodo()
  const current = globalState.todos;                                          // ‚¨ÖÔ∏è Tableau actuel des todos
  const next = new Array(current.length);                                     // ‚¨ÖÔ∏è Nouveau tableau de m√™me longueur
  for (let i = 0; i < current.length; i++) {                                  // ‚¨ÖÔ∏è Parcourt chaque todo
    const item = current[i];                                                  // ‚¨ÖÔ∏è Todo en cours
    next[i] = item.id === id                                                  // ‚¨ÖÔ∏è Si l‚Äôid correspond...
      ? { id: item.id, text: item.text, done: !item.done }                    // ‚¨ÖÔ∏è ...on cr√©e un nouvel objet inversant "done"
      : item;                                                                 // ‚¨ÖÔ∏è ...sinon on r√©utilise l‚Äôobjet tel quel
  }
  setState({ todos: next });                                                  // ‚¨ÖÔ∏è Publie le nouvel √©tat
}

/**
 * removeTodo(id): supprime l'√©l√©ment cibl√©
 */ // ‚¨ÖÔ∏è Action : suppression d‚Äôune todo par id
export function removeTodo(id) {                                              // ‚¨ÖÔ∏è Export de removeTodo()
  const current = globalState.todos;                                          // ‚¨ÖÔ∏è Tableau actuel
  let keepCount = 0;                                                           // ‚¨ÖÔ∏è Compte les √©l√©ments √† conserver
  for (let i = 0; i < current.length; i++) {                                  // ‚¨ÖÔ∏è Parcourt le tableau
    if (current[i].id !== id) keepCount++;                                    // ‚¨ÖÔ∏è Incr√©mente si l‚Äô√©l√©ment n‚Äôest pas celui √† supprimer
  }

  const next = new Array(keepCount);                                          // ‚¨ÖÔ∏è Cr√©e un nouveau tableau de la bonne taille
  let j = 0;                                                                  // ‚¨ÖÔ∏è Index d‚Äô√©criture dans le nouveau tableau
  for (let i = 0; i < current.length; i++) {                                  // ‚¨ÖÔ∏è Deuxi√®me parcours pour copier les √©l√©ments √† garder
    if (current[i].id !== id) {                                               // ‚¨ÖÔ∏è Si diff√©rent de l‚Äôid supprim√©...
      next[j] = current[i];                                                   // ‚¨ÖÔ∏è ...on copie l‚Äô√©l√©ment
      j++;                                                                    // ‚¨ÖÔ∏è ...et on avance l‚Äôindex d‚Äô√©criture
    }
  }
  setState({ todos: next });                                                  // ‚¨ÖÔ∏è Publie le tableau filtr√©
}

/**
 * toggleTheme(): bascule light/dark
 */ // ‚¨ÖÔ∏è Action : change le th√®me global
export function toggleTheme() {                                               // ‚¨ÖÔ∏è Export de toggleTheme()
  const nextTheme = globalState.theme === "light" ? "dark" : "light";         // ‚¨ÖÔ∏è Choisit l‚Äôautre valeur
  setState({ theme: nextTheme });                                             // ‚¨ÖÔ∏è Met √† jour le store global
}
