// src/components/Counter.js                          // üìÑ Emplacement du fichier (bonne pratique: un composant = un fichier)
import { el, clear } from "../utils/dom.js";         // ‚¨ÖÔ∏è On importe deux utilitaires DOM : `el` (cr√©e des √©l√©ments) et `clear` (vide un n≈ìud proprement)
import { createState } from "../state/store.js";     // ‚¨ÖÔ∏è On importe notre mini useState "vanilla" (get/set/subscribe)

export function Counter() {                          // ‚¨ÖÔ∏è Composant "Counter" : une fonction qui fabrique et renvoie un n≈ìud DOM
  // √©tat local: compteur
  const count = createState(0);                      // ‚¨ÖÔ∏è √âtat local initialis√© √† 0 ; `count.get()` lit, `count.set()` met √† jour, `count.subscribe()` √©coute

  const root = el("div", { className: "card" });     // ‚¨ÖÔ∏è Conteneur principal du composant (carte visuelle)

  const title = el("h2", { text: "Compteur (useState local)" }); // ‚¨ÖÔ∏è Titre de la carte (texte s√©curis√© via textContent)

  const valueStrong = el("strong", { text: "0" });   // ‚¨ÖÔ∏è √âl√©ment qui affichera la valeur du compteur (on le mettra √† jour)
  const display = el("div", { className: "row" }, [  // ‚¨ÖÔ∏è Ligne horizontale : libell√© + valeur
    el("span", { className: "small", text: "Valeur actuelle :" }), // ‚¨ÖÔ∏è Petit libell√© √† gauche
    valueStrong                                                // ‚¨ÖÔ∏è La valeur visible (0 au d√©marrage)
  ]);

  const onDec = () => count.set(v => v - 1);         // ‚¨ÖÔ∏è Handler "‚Äì" : on passe une fonction updater (bon r√©flexe) pour √©viter les √©tats obsol√®tes
  const onInc = () => count.set(v => v + 1);         // ‚¨ÖÔ∏è Handler "+" : m√™me principe, on incr√©mente √† partir de la valeur actuelle
  const onReset = () => count.set(0);                // ‚¨ÖÔ∏è Handler "Reset" : on fixe l'√©tat √† 0 (valeur directe)

  const buttons = el("div", { className: "row" }, [  // ‚¨ÖÔ∏è Ligne des boutons d'action
    el("button", { className: "ghost",   on: { click: onDec } },  ["‚Äì"]),  // ‚¨ÖÔ∏è Bouton d√©cr√©mentation (style ghost)
    el("button", { className: "primary", on: { click: onInc } },  ["+"]),  // ‚¨ÖÔ∏è Bouton incr√©mentation (style primary)
    el("button", {                       on: { click: onReset } },["Reset"])// ‚¨ÖÔ∏è Bouton reset
  ]);

  root.appendChild(title);                           // ‚¨ÖÔ∏è On assemble : titre...
  root.appendChild(display);                         // ‚¨ÖÔ∏è ... puis affichage de la valeur...
  root.appendChild(buttons);                         // ‚¨ÖÔ∏è ... puis les boutons

  const renderValue = () => {                        // ‚¨ÖÔ∏è Fonction de rendu de la valeur (appel√©e au d√©marrage et √† chaque changement d'√©tat)
    clear(valueStrong);                              // ‚¨ÖÔ∏è On nettoie l'√©l√©ment (bonne pratique : √©viter innerHTML = "")
    valueStrong.appendChild(                         // ‚¨ÖÔ∏è On ajoute un TextNode avec la valeur du state
      document.createTextNode(String(count.get()))   // ‚¨ÖÔ∏è `String(...)` assure qu'on met bien du texte (pas de number brut)
    );
  };

  renderValue();                                     // ‚¨ÖÔ∏è Rendu initial (sinon √ßa resterait "0" en dur)
  count.subscribe(renderValue);                      // ‚¨ÖÔ∏è √Ä chaque `count.set(...)`, on relance `renderValue` (UI r√©active sans framework)

  return root;                                       // ‚¨ÖÔ∏è Le composant renvoie son n≈ìud racine pour √™tre mont√© dans la page
}
