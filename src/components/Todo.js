// src/components/Todo.js                                                                   // üìÑ Composant Todo (liste de t√¢ches) branch√© sur le store global
import { el, clear, cls } from "../utils/dom.js";                                          // ‚¨ÖÔ∏è Utilitaires DOM: cr√©er des √©l√©ments (el), vider un n≈ìud (clear), g√©rer des classes (cls)
import { getState, subscribeToState, addTodo, toggleTodo, removeTodo } from "../state/store.js"; // ‚¨ÖÔ∏è S√©lecteurs & actions du store global

export function Todo() {                                                                   // ‚¨ÖÔ∏è Composant fonctionnel qui renvoie un n≈ìud DOM
  const root = el("div", { className: "card" });                                           // ‚¨ÖÔ∏è Carte visuelle qui contient toute la Todo

  const title = el("h2", { text: "Todo (store global)" });                                 // ‚¨ÖÔ∏è Titre de section

  const input = el("input", {                                                              
    className: "input",                                                                    // ‚¨ÖÔ∏è Style du champ texte
    attrs: { type: "text", placeholder: "Ajouter une t√¢che..." }                           // ‚¨ÖÔ∏è Attributs HTML s√©curis√©s (pas d‚ÄôinnerHTML)
  });                                                                                      // ‚¨ÖÔ∏è Champ o√π l‚Äôutilisateur saisit la nouvelle t√¢che

  const onAdd = () => {                                                                     // ‚¨ÖÔ∏è Handler appel√© quand on clique sur "Ajouter"
    const value = input.value.trim();                                                      // ‚¨ÖÔ∏è Nettoie les espaces inutiles au bord
    if (value.length === 0) return;                                                        // ‚¨ÖÔ∏è Si rien saisi ‚Üí on ne fait rien
    addTodo(value);                                                                         // ‚¨ÖÔ∏è Action du store: ajoute une todo (immutabilit√© g√©r√©e dans le store)
    input.value = "";                                                                       // ‚¨ÖÔ∏è Reset du champ apr√®s ajout
    input.focus();                                                                          // ‚¨ÖÔ∏è UX: remet le focus pour pouvoir encha√Æner
  };

  const btnAdd = el("button", { className: "primary", on: { click: onAdd } }, ["Ajouter"]); // ‚¨ÖÔ∏è Bouton d‚Äôajout (style primary) qui d√©clenche onAdd
  const formRow = el("div", { className: "row" }, [input, btnAdd]);                         // ‚¨ÖÔ∏è Ligne qui aligne l‚Äôinput et le bouton

  const list = el("div");                                                                   // ‚¨ÖÔ∏è Conteneur o√π on rendra la liste des t√¢ches

  root.appendChild(title);                                                                  // ‚¨ÖÔ∏è Assemble: titre...
  root.appendChild(formRow);                                                                // ‚¨ÖÔ∏è ... puis la barre d‚Äôajout...
  root.appendChild(list);                                                                   // ‚¨ÖÔ∏è ... puis le conteneur de liste

  const renderList = () => {                                                                // ‚¨ÖÔ∏è Fonction de rendu (appel√©e au d√©marrage et √† chaque changement du store)
    clear(list);                                                                            // ‚¨ÖÔ∏è Toujours repartir d‚Äôun conteneur vide (√©vite l‚Äôempilement)

    const { todos } = getState();                                                           // ‚¨ÖÔ∏è Lecture de la source de v√©rit√© (tableau des t√¢ches)
    if (todos.length === 0) {                                                               // ‚¨ÖÔ∏è Cas "liste vide"
      list.appendChild(                                                                      // ‚¨ÖÔ∏è Message doux pour encourager √† ajouter
        el("p", { className: "small", text: "Aucune t√¢che. Ajoutez-en une !" })
      );
      return;                                                                               // ‚¨ÖÔ∏è On sort (rien d‚Äôautre √† dessiner)
    }

    for (const item of todos) {                                                             // ‚¨ÖÔ∏è Pour chaque t√¢che du store...
      const onToggle = () => toggleTodo(item.id);                                           // ‚¨ÖÔ∏è Handler: coche/d√©coche (inverse `done`)
      const onRemove = () => removeTodo(item.id);                                           // ‚¨ÖÔ∏è Handler: supprime la t√¢che

      const checkbox = el("input", {                                                        // ‚¨ÖÔ∏è Case √† cocher li√©e √† l‚Äô√©tat `done`
        attrs: { type: "checkbox" }, 
        on: { change: onToggle }                                                            // ‚¨ÖÔ∏è Sur changement, on d√©clenche l‚Äôaction globale
      });
      checkbox.checked = !!item.done;                                                       // ‚¨ÖÔ∏è Sync visuelle avec la valeur courante (coch√© si done)

      const label = el("span", { text: item.text });                                        // ‚¨ÖÔ∏è Texte de la t√¢che (texte s√©curis√©)
      const btn = el("button", { on: { click: onRemove } }, ["Supprimer"]);                 // ‚¨ÖÔ∏è Bouton suppression

      const row = el("div", { className: "todo-item" }, [checkbox, label, btn]);            // ‚¨ÖÔ∏è Ligne compl√®te: [‚òê] [texte] [Supprimer]
      cls(row, "done", !!item.done);                                                        // ‚¨ÖÔ∏è Ajoute/enl√®ve la classe "done" pour le style (barr√©/opacit√©)

      list.appendChild(row);                                                                // ‚¨ÖÔ∏è Ins√®re la ligne dans la liste
    }
  };

  renderList();                                                                             // ‚¨ÖÔ∏è Premier rendu initial de la liste
  subscribeToState(renderList);                                                             // ‚¨ÖÔ∏è Abonnement: √† chaque setState global ‚Üí re-render

  return root;                                                                              // ‚¨ÖÔ∏è Le composant expose sa racine DOM (mont√©e dans main.js)
}
