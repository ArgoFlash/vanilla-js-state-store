// src/utils/dom.js                                                    // üìÑ Module d'utilitaires DOM (cr√©ation/manipulation d'√©l√©ments)

/**
 * el(tag, props?, children?)
 * Cr√©e un √©l√©ment proprement (sans innerHTML).
 * - props: { id, className, attrs: {‚Ä¶}, dataset: {‚Ä¶}, on: {click: fn, input: fn, ‚Ä¶}, text }
 * - children: tableau d'√©l√©ments DOM ou cha√Ænes (transform√©es en TextNode)
 */ // ‚¨ÖÔ∏è Signature et contrat d'utilisation de la fabrique d'√©l√©ments
export function el(tag, props, children) {                            // ‚¨ÖÔ∏è Fonction principale: fabrique un n≈ìud DOM configurable
  const node = document.createElement(tag);                           // ‚¨ÖÔ∏è Cr√©e l'√©l√©ment via l'API DOM (s√©curis√©)

  if (props) {                                                        // ‚¨ÖÔ∏è Si des propri√©t√©s sont fournies, on les applique
    if (props.id) node.id = props.id;                                 // ‚¨ÖÔ∏è Affecte un id (facilite la s√©lection/accessibilit√©)
    if (props.className) node.className = props.className;            // ‚¨ÖÔ∏è Affecte les classes CSS (string, pas de tableau)

    if (props.text != null) {                                         // ‚¨ÖÔ∏è Si un texte est donn√© (y compris chaine vide)
      node.textContent = String(props.text);                          // ‚¨ÖÔ∏è textContent √©vite l'injection HTML (contraire d'innerHTML)
    }

    if (props.attrs) {                                                // ‚¨ÖÔ∏è Attributs standards (type, placeholder, aria-*, role, etc.)
      for (const key of Object.keys(props.attrs)) {                   // ‚¨ÖÔ∏è On parcourt proprement les cl√©s de l'objet
        node.setAttribute(key, String(props.attrs[key]));             // ‚¨ÖÔ∏è setAttribute permet d'ajouter des attributs arbitraires
      }
    }

    if (props.dataset) {                                              // ‚¨ÖÔ∏è data-* personnalis√©s (dataset)
      for (const key of Object.keys(props.dataset)) {                 // ‚¨ÖÔ∏è Chaque cl√© devient data-key="..."
        node.dataset[key] = String(props.dataset[key]);               // ‚¨ÖÔ∏è Affectation via dataset, typ√©e en string par s√©curit√©
      }
    }

    if (props.on) {                                                   // ‚¨ÖÔ∏è Gestionnaires d'√©v√©nements (click, input, change, etc.)
      for (const ev of Object.keys(props.on)) {                       // ‚¨ÖÔ∏è Pour chaque type d'√©v√©nement...
        node.addEventListener(ev, props.on[ev]);                      // ‚¨ÖÔ∏è ...on attache la fonction correspondante
      }
    }
  }

  if (children && children.length) {                                  // ‚¨ÖÔ∏è Si des enfants sont fournis, on les ins√®re
    for (const child of children) {                                   // ‚¨ÖÔ∏è Parcourt du tableau des enfants
      if (typeof child === "string" || typeof child === "number") {   // ‚¨ÖÔ∏è Si c'est un texte/number, on cr√©e un TextNode
        node.appendChild(document.createTextNode(String(child)));     // ‚¨ÖÔ∏è Transformation s√©curis√©e en texte
      } else if (child instanceof Node) {                             // ‚¨ÖÔ∏è Si c'est d√©j√† un n≈ìud DOM...
        node.appendChild(child);                                      // ‚¨ÖÔ∏è ...on l'attache tel quel (composition de composants)
      }
      // (Sinon: on ignore les valeurs non support√©es ‚Äî> bonne robustesse)
    }
  }

  return node;                                                        // ‚¨ÖÔ∏è Renvoie le n≈ìud pr√™t √† √™tre ins√©r√© dans le DOM
}

/**
 * clear(node): supprime tous les enfants d'un n≈ìud
 */ // ‚¨ÖÔ∏è Helper pour nettoyer un conteneur (√©vite innerHTML = "")
export function clear(node) {                                         // ‚¨ÖÔ∏è D√©clare la fonction utilitaire
  while (node.firstChild) node.removeChild(node.firstChild);          // ‚¨ÖÔ∏è Boucle de retrait des enfants (performante et s√ªre)
}

/**
 * cls(node, className, present): ajoute/enl√®ve une classe selon present (boolean)
 */ // ‚¨ÖÔ∏è Helper pour g√©rer les classes de mani√®re d√©clarative
export function cls(node, className, present) {                       // ‚¨ÖÔ∏è D√©clare la fonction utilitaire
  if (present) node.classList.add(className);                         // ‚¨ÖÔ∏è Ajoute la classe si `present` est vrai
  else node.classList.remove(className);                              // ‚¨ÖÔ∏è Sinon, la retire (pas d'effet si d√©j√† absent)
}
